{"version":3,"sources":["components/Card.js","styles/colors.js","components/Text.js","components/Menu.js","containers/App.js","serviceWorker.js","index.js"],"names":["styles","backgroundColor","borderRadius","Card","props","style","className","children","color","fontFamily","fontWeight","Text","margin","MobileMenu","Component","DesktopMenu","this","App","id","textAlign","fontSize","name","href","Icon","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8MAIMA,EAAS,CACbC,gBCJ4B,UDK5BC,aAAc,IASDC,EANF,SAACC,GACZ,IAAMC,EAAK,2BAAOL,GAAWI,EAAMC,OAC7BC,EAAS,eAAWF,EAAME,WAChC,OAAO,yBAAKD,MAAOA,EAAOC,UAAWA,GAAYF,EAAMG,WERnDP,EAAS,CACbQ,MDLuB,UCMvBC,WAAY,SACZC,WAAY,KAYCC,EATF,SAACP,GAAW,IACfE,EAAqBF,EAArBE,UAAWD,EAAUD,EAAVC,MACnB,OACE,uBAAGA,MAAK,2BAAML,GAAWK,GAASC,UAAWA,GAC1CF,EAAMG,WCNPP,EAAS,CACbY,OAAQ,IAcJC,GAX4BC,Y,uKAc9B,OAAO,kBAAC,EAAD,CAAMT,MAAO,CAAEG,MF1BD,YE0Bd,mB,GAHcM,cAOnBC,E,uKAGF,OACE,wBAAIV,MAAOL,GACRgB,KAAKZ,MAAMG,c,GALMO,aC1BpBG,E,uKAEF,OACE,yBAAKX,UAAU,mBACb,kBAAC,EAAD,CAAMA,UAAU,eACd,6BACE,wBAAIY,GAAG,OAAP,WACA,wBAAIA,GAAG,WAAP,iBAGF,kBAAC,EAAD,CAAMb,MAAO,CAAEc,UAAW,SAAUC,SAAU,KAA9C,kHAIA,kBAAC,EAAD,CAAMf,MAAO,CAAEe,SAAU,GAAIZ,MHlBd,UGkBgCW,UAAW,WAA1D,gBAIA,yBAAKD,GAAG,kBACN,kBAAC,EAAD,CACEG,KAAK,iBACLC,KAAK,yDAGP,kBAAC,EAAD,CAAMD,KAAK,YAAYC,KAAK,sCAE5B,kBAAC,EAAD,CACED,KAAK,eACLC,KAAK,sCAGP,kBAAC,EAAD,CAAMD,KAAK,kBAAkBC,KAAK,oC,GA/B5BR,aAuCZS,EAAO,SAACnB,GAAD,OACX,uBAAGkB,KAAMlB,EAAMkB,KAAME,OAAO,SAASC,IAAI,uBACvC,uBAAGnB,UAAS,cAASF,EAAMiB,KAAf,UAA6BhB,MAAO,CAAEG,MH7C7B,eGiDVS,ICrCKS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5c5a996c.chunk.js","sourcesContent":["import React from 'react'\n\nimport { APP_DARK_BROWN } from '../styles/colors'\n\nconst styles = {\n  backgroundColor: APP_DARK_BROWN,\n  borderRadius: 25\n}\n\nconst Card = (props) => {\n  const style = {...styles, ...props.style}\n  const className = `card ${props.className}`\n  return <div style={style} className={className}>{props.children}</div>\n}\n\nexport default Card\n","export const APP_WHITE = \"#FDFEEC\"\nexport const APP_DARK_BROWN = \"#1D1717\"\n","import React from 'react'\n\nimport { APP_WHITE } from '../styles/colors'\n\nconst styles = {\n  color: APP_WHITE,\n  fontFamily: \"Nunito\",\n  fontWeight: 300,\n}\n\nconst Text = (props) => {\n  const { className, style } = props\n  return (\n    <p style={{...styles, ...style }} className={className}>\n      {props.children}\n    </p>\n  )\n}\n\nexport default Text\n","import React, { Component } from 'react'\n\n\nimport { MOBILE_BREAK } from '../styles/breakpoints'\nimport { APP_WHITE }    from '../styles/colors'\n\nimport Text from './Text'\n\nconst styles = {\n  margin: 20\n}\n\nexport default class Menu extends Component {\n\n  render() {\n    if (this.props.viewport.innerWidth < MOBILE_BREAK) {\n      return <MobileMenu {...this.props} />\n    } else {\n      return <DesktopMenu {...this.props} />\n    }\n  }\n}\n\nclass MobileMenu extends Component {\n\n  render() {\n    return <Text style={{ color: APP_WHITE }}>mobile todo</Text>\n  }\n}\n\nclass DesktopMenu extends Component {\n\n  render() {\n    return (\n      <ul style={styles}>\n        {this.props.children}\n      </ul>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { Card, Text } from '../components'\nimport { APP_WHITE } from '../styles/colors'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='container-fluid'>\n        <Card className='card banner'>\n          <div>\n            <h1 id='hey'>Hello, </h1>\n            <h1 id='clayton'>I'm Clayton.</h1>\n          </div>\n\n          <Text style={{ textAlign: 'center', fontSize: 14 }}>\n            Iâ€™m an experienced software engineer interested in designing,\n            scaling and simplifying modern web systems.\n          </Text>\n          <Text style={{ fontSize: 14, color: APP_WHITE, textAlign: 'center' }}>\n            New York, NY\n          </Text>\n\n          <div id='iconsContainer'>\n            <Icon\n              name='fa-linkedin-in'\n              href='https://www.linkedin.com/in/clayton-gentry-6492588a/'\n            />\n\n            <Icon name='fa-github' href='https://github.com/claytongentry/' />\n\n            <Icon\n              name='fa-instagram'\n              href='https://www.instagram.com/cg3ntry'\n            />\n\n            <Icon name='fas fa-envelope' href='mailto:cg3ntry@gmail.com' />\n          </div>\n        </Card>\n      </div>\n    )\n  }\n}\n\nconst Icon = (props) => (\n  <a href={props.href} target='_blank' rel='noopener noreferrer'>\n    <i className={`fab ${props.name} fa-2x`} style={{ color: APP_WHITE }} />\n  </a>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}